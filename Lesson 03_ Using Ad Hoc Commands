3.1 Using Ad Hoc Commands


  module  ----------->	ad hoc			
 --------	      -------------------       
		      |* ansible (this) |  -------->    Comp
		      |* ansible (that) |  -------->
		      -------------------      


			playbook
		      -------------
		      |* this	  | ---------> Comp
		      |* that     | ---------> Cloud 
		      |* also     |
		      -------------


Understanding Ad Hoc Commands:
* To run tasks on Ansible, you'll typically want to use Playbooks
* A Playbook is a YAML file in which tasks can be defined 
* For some tasks, writing a playbook is just too much work
* In such cases, you can use Ad hoc commands
* Ad hoc commands are also useful for testing if your playbook was successful

Ad Hoc Commands Ingredients:
* The basic structure is: ansible hosts -m module [-a 'module arguments'][-i inventory]
* The hosts part specifies on which host the command should be performed
* The module part indicates which Ansible module to use; following the module you'll specify module arguments
* If inventory is not specified, you'll need to specify the inventory as an argument
* An example of an ad hoc command is: ansible all -m user -a "name=lisa"
* And to verify the command works, use: ansible all -m command -a "id lisa" 

-----------------------------------------------------------------------------------------------------------------------------------------------

3.2 Understanding Ansible Modules

* Ansible comes with lots of modules that allow you to perform specific tasks on managed hosts
* When using Ansible, you'll always use modules to tell Ansible what you want it to do, in ad-hoc commands as well as in playbooks
* Many modules are provided with Ansible, if required you can develop your own modules
* Use ansible-doc -l for a list of modules currently avaliable
* All modules work with arguments, ansible-doc will show which arguments are avaliable and which are required
* Ansible modules are idempotent: which means that when running them again they'll give the same result and if a task has already been configured, they won't do it again


ansible all -m user -a 'name=lisa state=absent'
ansible all -m command -a 'id lisa'
ansible all -m command -a 'id lisa'
ansible all -m ping 

-----------------------------------------------------------------------------------------------------------------------------------------------

3.3 Using ansible-doc to get Module Documentation

Using ansible-doc:
* The ansible-doc command provides authoritative documentation about modules
* Use ansible-doc -l for a list of all modules
* Use ansible-doc modulename to get the documentation for a specific module

Understanding Module Status:
* Modules are very actively developed by the community, and the status field in the module documentation indicates the current status:
	* stableinterface: the module is stable and safe to use
	* preview: the module is in tech preview and its keywords may change
	* deprecated: the module should not be used anymore and will be removed in a future release
	* removed: the module has been removed and the documentation only still exists to help users migrating to its replacement

Understanding Module Support Status:
* The supported_by field in ansible-doc indicates who is responsible for supporting a module:
	* core: the module is supported by the core Ansible developers
	* curated: the primary support responsibility is with partners and companies in the community. Proposed changes are reviewed by the 			   core developers 
	* community: support is completely within the community


ansible-doc -l
ansible-doc -l | wc
ansible-doc user

-----------------------------------------------------------------------------------------------------------------------------------------------

3.4 Introducing Essential Ansible Modules

Essential Ansible Modules:
* ping: verifies the ability to log in and that Python has been installed
	* ansible all -m ping
* service: checks if a service is currently running 
	* ansible all -m service -a "name=httpd state=started"
* command: runs any command, but not through a shell
	* ansible all -m command -a "/sbin/reboot -t now"
* shell: runs arbitrary commands through a shell
	* ansible all -m shell -a set
* raw: runs a command on a remote host without a need for Python 
* copy: copies a file to the managed host
	* ansible all -m copy -a 'content="hello world" dest=/etc/motd'


ansible all -m ping
ansible all -m service -a "name=httpd state=started"
vim inventory
ansible all -m service -a "name=sshd state=started"
ansible ansible2.example.com -m command -a "/sbin/reboot"
ansible all -m ping
ansible all -m shell -a set
ansible all -m copy -a 'content=hello world" dest=/etc/motd'
ansible all -m shell -a 'cat /etc/motd'

-----------------------------------------------------------------------------------------------------------------------------------------------




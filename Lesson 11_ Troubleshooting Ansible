11.1 Managing Ansible Logs

Understanding Ansible Logging:
* By default Ansible is not configured to log its output anywhere 
* Set log_path in ansible.cfg to write logs to a specific destination
	* Create this file in the project directory, /var/log is not writable by the Ansible user and will only work when running the playbook 
          with sudo
* When using this, you should also use log rotation


vim ansible.cfg // "[defaults] ... " + "log_path = lesson11.log"
ansible-playbook vsftpd.yml
ls
less lesson11.log
ansible-playbook --syntax-check vsftpd.yml
vim vsftpd.yml

----------------------------------------------------------------------------------------------------------------------------------------------

11.2 Using the Debug Module

* Variables play an important role in playbooks
* The debug module is used to show values of variables in playbooks
* It can also be used to show messages in specific error situations 


ansible-doc debug
vim debugme.yml
ansible-playbook debugme.yml
ansible-playbook -v debugme.yml

----------------------------------------------------------------------------------------------------------------------------------------------

11.3 Using Check Mode

* Use ansible-playbook --check on a playbook to perform check mode; this will show what would happen when running the playbook without 
  actually changing anything 
	* Modules in the playbook must support check mode
	* Check mode doesn't always work well in conditionals
	
* Set: check_mode: yes within a task to always run that specific task in check mode
	* This is useful for checking individual tasks
	* When setting: check_mode: no, for a task, this task will never run in check mode
	* Notice that: check_mode: no, is new since Ansible 2.6, and replaces the: always_run: yes, option from earlier versions 

Using Check Mode on Templates:
* Add --diff to an Ansible playbook run to see differences that would be made by template files on a managed hosts
		* ansible-playbook --check --diff myplaybook.yml
		

ansible-playbook --check vsftpd.yml

----------------------------------------------------------------------------------------------------------------------------------------------

11.4 Using Modules for Troubleshooting and Testing 

Understanding Modules to Check:
* uri: checks content that is returned from a specific URL
* script: runs a script from the control node on the managed hosts
* stat: checks the status of files; use it to register a variable and next test to determine if a file exists
* assert: this module will fail with an error if a specific condition is not met

Understanding stat:
* The: stat module can be used to check on file status
* It returns a dictionary that contains a stat field which can have multiple values:
	* atime: last access time of the file
	* isdir: true if file is a directory
	* exists: true if file exists
	* size: size in bytes
	* and many more
	

vim bashversion.yml
ansible-playbook bashversion.yml
vim assertstat.yml
ansible-playbook assertstat.yml

----------------------------------------------------------------------------------------------------------------------------------------------

11.5 Troubleshooting Connection Issues

Understanding Connection Issues:
* Connection issues include the following 
	* Issues setting up the physical connection
	* Issues running tasks as teh target user

Analyzing Authentication Issues:
* Confirm the: remote_user setting and existence of remote user on the managed host
* Confirm host key setup
* Verify: become and become_user
* Check that sudo is configured correctly 

Connecting to Managed Hosts:
* When a host is avaliable at different IP addresses / names, you can use ansible_host in inventory to specify how to connect
* The ensures that the connection is made in a persistent way, using the right interface
* web.example.com ansible_host=192.168.4.100

Using Ad Hoc Commands to Test Connectivity:
* The ping module was developed to test connectivity
* Use the --become option to also test privilege escalation
	* ansible ansible1 -m ping
	* ansible ansible1 -m ping --become
* Use the command module to test different items:
	* ansible ansible1 -m command -a 'df'
	* ansible ansible1 -m command -a 'free -m'
	
	
ansible ansible1.example.com -m ping
ansible ansible1.example.com -m ping --become 
ansible all -m command -a 'df'
ansible all -m command -a 'free -m'
ansible all -m command -a 'df | grep sda' //failed
ansible all -m shell -a 'df | grep sda' //failed
ansible all -m shell -a 'df' 
ansible all -m shell -a 'df | grep nvme' 

----------------------------------------------------------------------------------------------------------------------------------------------

11.6 Analyzing Playbook Errors

Analyzing Playbooks:
* Start by reading output messages 
* Next, add verbosity using -v:
	* -v: the output data is displayed
	* -vv: output as well as input data is shown
	* -vvv: adds connection information
	* -vvvv: adds additional information, for instance, about scripts that are executed and the user who's running tasks
	
----------------------------------------------------------------------------------------------------------------------------------------------

11.7 Avoiding Errors in Playbook Best Practices

Best Practices:
* When developing Playbooks, some best practices should be applied 
* The: name of plays and tasks should make sense to clearly see what's happening 
* Include comments to clarify difficult bits
* Use white spaces to make playbooks mor readable
* Indentation is essential
* Keep playbooks simple and small
* Use includes when playbooks risk getting too big

----------------------------------------------------------------------------------------------------------------------------------------------


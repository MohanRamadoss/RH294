13.1 Understanding Modules Related to User Management

Modules Related to User Management:
* user: Manages Users and their common properties
* group: Manages Groups and their common properties 
* pamd: Configures PAM
* authorized_key: Copies SSH public keys from Ansible
* lineinfile: Modifies configuration files based on regex

Understanding authorized_key:
* The authorized_key module can be used to copy a user public key to the ~/.ssh/authorized_keys file
* This is useful to enable SSH access from remote machines, such as the Ansible control node
* Note that this will only copy the public key, and does NOT generate any SSH keys
* To generate SSH keys for new users, use the user module and its option: generate_ssh_key 

----------------------------------------------------------------------------------------------------------------------------------------------

13.2 Implementing a Playbook to Manage Users

Managing Users:
* Some tasks have well defined modules, some tasks don't
* When no specific module exists, it comes down to your own creativity
* When creating users, you'll at least want to use the users and groups modules, whereas authorized_key is useful as well

Managing sudo:
* There is no Ansible module for managing sudo
* Using templates and variables, it's not too difficult to set it up manually through


vim setup_users.yml
cat vars/users
cat vars/groups

vim vars/defaults
vim sudoers.j2
vim setup_sudo.yml
ansible-playbook setup_sudo.yml

----------------------------------------------------------------------------------------------------------------------------------------------

13.3 Managing Encrypted Passwords

Understanding Encrypted Passwords:
* Encrypted user passwords are stored in /etc/shadow
* A password strings look like:
  $6$23879879879/$927395798793847t982798789237
* This string consists of 3 parts:
	* The hashing algorithm that is used
	* The random salt that was used to encrypt the password
	* The encrypted hash of the user password
* To create an encrypted password, a random salt is used to ensure that two users that have identical passwords would not have identical 
  entries in /etc/shadow
* This salt and the unencrypted password are combined and encrypted, which generates the encrypted hash that is stored in /etc/shadow

Creating Encrypted Passwords in Ansible:
* The Ansible user module does not generate encrypted passwords
* To generate an encrypted password, an external utility must be used to generate a cryptostring
* Next, the cryptostring can be used in a variable to create the user password
* For enhanced security, consider storing the password hash in a vault encrypted file


ansible localhost -m debug -a "msg={{ 'password' | password_hash('sha152','mypassword') }}"
vim userpw.yml
ansible-playbook userpw.yml
ansible ansible2.example.com -m user "name=anna state=absent remove=yes"
ansible ansible2.example.com -m user -a "name=anna state=absent remove=yes"
ansible-playbook userpw.yml
ssh anna@ansible2
exit

----------------------------------------------------------------------------------------------------------------------------------------------



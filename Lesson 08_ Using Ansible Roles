8.1 Understanding Directory Structure Best Practices 

~/myproject/ansible.cfg
			inventory-dev
			inventory-prod
			site.yml
			lamp.yml ------------------> * ~/.ansible/roles/nginx
						     * ~/.ansible/roles/httpd				
			file.yml ------------------> * ~/.ansible/roles/samba
						     * ~/.ansible/roles/nfs
			group-vars/lamp
					  /file
			host_vars
			
Organizing Ansible Contents:
* When working with Ansible, it's recommended to use project directories so that contents can be organized in a consistent way
* Each project directory may have its own ansible.cfg, inventory as well as playbooks 
* If the directory grows bigger, variable files and other include files may be used
* And finally, roles can be use to standardize and easily re-use specific parts of Ansible
* For now, consider a role a complete project dedicated to a specific task that is going to be included in the main playbook

Directory Layout Best Practices:
* Ansible Documentation describes best practices
  (https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html)
  
* Some highlights:
	* On top in the directory, use site.yml as the master playbook
	* From site.yml, call specific playbooks for specifictypes of host (webservers.yml, dbservers.yml, etc.)
	* Consider using different inventory files to differentiate between production and staging phases 
	* Use groups_var/ and host_vars/ to set host related variables
	* Use roles to standardize common tasks
	
---------------------------------------------------------------------------------------------------------------------------------------------
 
8.2 Understanding Ansible Roles

Understanding Roles:
* Ansible Playbooks can be very similar: code used in one playbook can be useful in other playbooks also
* To make it easy to re-use code, roles can be used. A role is a collection of tasks, variables, files, templates and other resources 
in a fixed directory structure that, as such, can easily be included from a playbook
* Roles should be written in a generic way , such that play specific can be defined as variables in the play and overwrite the dafault 
variables that should be set in the role

Understanding Roles Default Structure:
* defaults contains default values of role variables. If variables are set at the play level as well, these default values are overwritten
* files my contain static files that are needed from the role tasks
* handlers has a main.yml taht defines handlers used in the role
* meta has a main.yml that may be used to include role metadata, such as information about author, license, dependencies and more
* tasks contains a main.yml that defines the role task definitions
* templates is used to store Jinja2 templates
* tests may contain an optional inventory file, as well as a test.yml playbook that can be used to test the role
* vars may contain a main.yml with standard variables for the role (which are not meant to be overwritten by playbook variables)

Understanding Role Variables:
* Variables can be defined at different levels in a role
* vars/main.yml has the role default variables, which are used in default role functioning. They are not intended to be overwritten 
* defaults/main.yml can contain dafault variables. These have a low precedence and can be overwritten by variables with the same name 
that are set in the playbook and which have higher precedence
* Playbook variables will always overwrite the variables as set in the role. Site-specific variables such as secrets and vault encrypted 
data should always be managed from the playbook, as role variables are intended to be generic
* Role variables are defined in the playbook when calling the role and they have the highest precedence and overwrite playbook variables 
as well as inventory variables

Understanding Role Location:
* Roles can be obtained in many ways:
	* You can write your own roles
	* For Red Hat Enterprise Linux, the rhel-system-roles package is avaliable
	* The community provides roles through the Ansible Galaxy website
* Roles can be stored at a default location and from there can easily be used from playbooks:
	* ./roles has highest precedence
	* ~/.ansible/roles is checked after that
	* /etc/ansible/roles is checked next
	* /usr/share/ansible/roles is checked last


Using Roles in a Playbook:
* Roles are reffered to from playbooks
* When roles are used, they will run before any task that is defined in the playbook 

---
- name: role demo
  hosts: all
  roles: 
    - role1
	- role2
	
* When calling a role, role variables can be defined

---
- name: role variable demo
  hosts: all
  roles: 
    - role: role1
	- role: role2
	  var1: cow
	  var2: goat
	  
---------------------------------------------------------------------------------------------------------------------------------------------

8.3 Using Ansible Galaxy for Standard Roles

Using Ansible Galaxy:
* Administrators can define their own roles or standard roles can be used from Ansible Galaxy
* Ansible Galaxy is a public website where community provided roles are offered 
* Before writing your own roles, check Galaxy, you may get the roles from there
* An easy-to-use search interface is avaliable at galaxy.ansible.com


ansible-galaxy install geerlingguy.nginx
vim main.yml
cd geerlingguy.nginx
cd geerlingguy.nginx/tasks
vim setup-RedHat.yml
vim nginx-role.yml
ansible-playbook nginx-role.yml

---------------------------------------------------------------------------------------------------------------------------------------------

8.4 Using the Ansible Galaxy Command Line Tool

Using the Galaxy CLI Utility:
* ansible-galaxy serach: will search for roles
	* If an argument is provided, ansible-galaxy will serach for this argument in the role description
	* Use options --author, --platforms and --galaxy-tags to narrow down the search results
	* ansible-galaxy search 'wordpress' --platforms EL

* ansible-galaxy info: provides information about roles 
	* ansible-galaxy info bertvv.wordpress

* ansible-galaxy install: downloads a role and installs it in ~/.ansible/roles
* After download, these roles can be used in playbooks, like any other role

Managing Roles:
* ansible-galaxy list: shows installed roles
* ansible-galaxy remove: can be used to clean up and remove roles
* ansible-galaxy init creates a directory structure that can be used to start developing your own role:
	* It interacts with the Ansible Galaxy website API
	* Specify username and role name as arguments 
	* ansible-galaxy init user.myrole
	
Using a Requirements File:
* ansible-galaxy: can be used to install a list of roles based on definitions in a requirements file
* A requirements file is a yml file that defines a list of required roles that are specified using the src keyword
* The src keyword can contain the name of a role from Ansible Galaxy, or a URL to a custom location pointing to your own roles
* Create roles/requirements.yml in the projects directory to use it
* Always specify the optional version attribute, to avoid getting surprises when a newer version of a role has become avaliable.
- src: file:///opt/local/roles/myrole.tar
  name: myrole
  version: 1.0
* To install roles using a requirements file, use: ansible-galaxy install -r roles/requirements.yml
  

ansible-galaxy search 'wordpress' --platforms EL
ansible-galaxy info bertvv.wordpress
ansible-galaxy install bertvv.wordpress
vim wordpress.yml

vim roles/requirements.yml
ansible-galaxy install -r roles/requirements.yml -p roles
vim roles/requirements.yml
-> "- version: 2.7.0
    - name: nginx-2.7.0"
ansible-galaxy install -r roles/requirements.yml -p roles

---------------------------------------------------------------------------------------------------------------------------------------------
	
8.5 Creating Custom Roles

Creating Roles:
* To create your own roles, use ansible-galaxy init myrole to create the role directory structure
* Mind the location of the directory structure, you can put it in the local project directory, or in a directory that is accesible 
  for all projects
* Populate the required role files as discussed before

Creating Roles - Best Practices:
* Each role should have its own version control repository 
* Don't put sensitive information in the role, but in the local plybooks or Ansible Vault instead 
* Use ansible-galaxy init to create the role structure 
* Don't forget to edit the README.md and the meta/main.yml to contain documentation about your role
* Roles should be dedicated to one task/function. Use multiple roles to manage multiple tasks/functions.
* Have a look at existing (Galaxy) roles before starting to write your own

Defining Role Dependencies:
* The meta/main.yml can be used to define role dependencies
* Dependencies listed here will be installed automatically when this role is used 

Using Conditional Roles:
* Conditional roles call a role dynamically, using the include_role module 
	* This makes it so conditional roles are treated more as tasks 
* Conditional Roles can be combined with conditional statements:
	* This makes it so a role will only run if the conditional statement is true 
	* Use include_role in a task statement to do so
	
---
- hosts: lamp
  tasks:
  - include_role: 
      name: lamp
    when: "ansible_facts['os_family'] == 'RedHat'"
    

cd roles
ls
tree motd
cd motd
vim tasks/main.yml
vim templetes/motd.j2
vim defaults/main.yml
vim vars/main.yml
vim handlers/main.yml
rm -rf handlers/ vars/
tree
rm -rf tests/
vim meta/main.yml
vim README.md
cd .. / .. 
ls
vim motd-role.yml
ansible-playbook motd-role.yml
ansible ansible2.example.com -m shell -a 'cat /etc/motd'

---------------------------------------------------------------------------------------------------------------------------------------------

8.6 Managing Order of Execution 

Understanding Role Order of Execution:
* Role tasks are always executed before playbook tasks
* Next, playbook tasks are executed 
* And after playbook tasks, handlers are executed
* Use: pre_tasks to define playbook tasks that are to be executed before the tasks in a role:
	* If these tasks notify a handler, this handler is executed before as well
* The post_tasks keyword can be used to define playbook tasks that are executed after playbook tasks and roles


vim pretasks.yml
ansible-playbook pretasks.yml

---------------------------------------------------------------------------------------------------------------------------------------------

8.7 Understanding RHEL System Roles

* The rhel-system-roles package can be installed to provide some standard roles for RHEL 6.10 and later
* These roles are based on the community linux-system-roles and supported by Red Hat support 
* Use the rhel-system-roles to overcome the difference between configuration choices on RHEL 6,7, and 8

---------------------------------------------------------------------------------------------------------------------------------------------

